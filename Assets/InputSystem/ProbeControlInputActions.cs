//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/ProbeControlInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ProbeControlInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ProbeControlInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ProbeControlInputActions"",
    ""maps"": [
        {
            ""name"": ""ProbeControl"",
            ""id"": ""752aa170-59b1-43ca-822a-137aa15399c7"",
            ""actions"": [
                {
                    ""name"": ""ForwardAxisPos"",
                    ""type"": ""Button"",
                    ""id"": ""dd3d5762-f567-475d-a121-9ad4fdf9bf06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForwardAxisNeg"",
                    ""type"": ""Button"",
                    ""id"": ""24d580fe-599f-447d-9b16-3e8572096d54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bfa6650f-a3ab-4956-90f9-34eb96f25583"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardAxisPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a07ec60e-6555-4f1c-b1ff-c46548f216ca"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardAxisPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6542dc8-84ab-41f2-a164-c3300c2cdbf9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""ForwardAxisNeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f496d71c-e7cb-415f-8ac0-a06af86eca8b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""ForwardAxisNeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ProbeMetaControl"",
            ""id"": ""0fdffdbf-8bb5-4fef-a353-5cf5c5f0645f"",
            ""actions"": [
                {
                    ""name"": ""NextProbe"",
                    ""type"": ""Button"",
                    ""id"": ""d08c47bb-04ca-4c76-ba71-4093f6ffa64e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevProbe"",
                    ""type"": ""Button"",
                    ""id"": ""20a32f39-1029-44be-bb7a-37c6bcea1212"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50473aba-aa56-4cd0-986f-2498d8dd861c"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextProbe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebd974b4-dfea-457e-97d3-12b4b064d403"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextProbe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0dce264-d88e-4044-90b8-b1387fc4349f"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevProbe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9c03d5c-b096-421f-9459-0d3cb2d07730"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevProbe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ProbeControl
        m_ProbeControl = asset.FindActionMap("ProbeControl", throwIfNotFound: true);
        m_ProbeControl_ForwardAxisPos = m_ProbeControl.FindAction("ForwardAxisPos", throwIfNotFound: true);
        m_ProbeControl_ForwardAxisNeg = m_ProbeControl.FindAction("ForwardAxisNeg", throwIfNotFound: true);
        // ProbeMetaControl
        m_ProbeMetaControl = asset.FindActionMap("ProbeMetaControl", throwIfNotFound: true);
        m_ProbeMetaControl_NextProbe = m_ProbeMetaControl.FindAction("NextProbe", throwIfNotFound: true);
        m_ProbeMetaControl_PrevProbe = m_ProbeMetaControl.FindAction("PrevProbe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ProbeControl
    private readonly InputActionMap m_ProbeControl;
    private IProbeControlActions m_ProbeControlActionsCallbackInterface;
    private readonly InputAction m_ProbeControl_ForwardAxisPos;
    private readonly InputAction m_ProbeControl_ForwardAxisNeg;
    public struct ProbeControlActions
    {
        private @ProbeControlInputActions m_Wrapper;
        public ProbeControlActions(@ProbeControlInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardAxisPos => m_Wrapper.m_ProbeControl_ForwardAxisPos;
        public InputAction @ForwardAxisNeg => m_Wrapper.m_ProbeControl_ForwardAxisNeg;
        public InputActionMap Get() { return m_Wrapper.m_ProbeControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ProbeControlActions set) { return set.Get(); }
        public void SetCallbacks(IProbeControlActions instance)
        {
            if (m_Wrapper.m_ProbeControlActionsCallbackInterface != null)
            {
                @ForwardAxisPos.started -= m_Wrapper.m_ProbeControlActionsCallbackInterface.OnForwardAxisPos;
                @ForwardAxisPos.performed -= m_Wrapper.m_ProbeControlActionsCallbackInterface.OnForwardAxisPos;
                @ForwardAxisPos.canceled -= m_Wrapper.m_ProbeControlActionsCallbackInterface.OnForwardAxisPos;
                @ForwardAxisNeg.started -= m_Wrapper.m_ProbeControlActionsCallbackInterface.OnForwardAxisNeg;
                @ForwardAxisNeg.performed -= m_Wrapper.m_ProbeControlActionsCallbackInterface.OnForwardAxisNeg;
                @ForwardAxisNeg.canceled -= m_Wrapper.m_ProbeControlActionsCallbackInterface.OnForwardAxisNeg;
            }
            m_Wrapper.m_ProbeControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ForwardAxisPos.started += instance.OnForwardAxisPos;
                @ForwardAxisPos.performed += instance.OnForwardAxisPos;
                @ForwardAxisPos.canceled += instance.OnForwardAxisPos;
                @ForwardAxisNeg.started += instance.OnForwardAxisNeg;
                @ForwardAxisNeg.performed += instance.OnForwardAxisNeg;
                @ForwardAxisNeg.canceled += instance.OnForwardAxisNeg;
            }
        }
    }
    public ProbeControlActions @ProbeControl => new ProbeControlActions(this);

    // ProbeMetaControl
    private readonly InputActionMap m_ProbeMetaControl;
    private IProbeMetaControlActions m_ProbeMetaControlActionsCallbackInterface;
    private readonly InputAction m_ProbeMetaControl_NextProbe;
    private readonly InputAction m_ProbeMetaControl_PrevProbe;
    public struct ProbeMetaControlActions
    {
        private @ProbeControlInputActions m_Wrapper;
        public ProbeMetaControlActions(@ProbeControlInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextProbe => m_Wrapper.m_ProbeMetaControl_NextProbe;
        public InputAction @PrevProbe => m_Wrapper.m_ProbeMetaControl_PrevProbe;
        public InputActionMap Get() { return m_Wrapper.m_ProbeMetaControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ProbeMetaControlActions set) { return set.Get(); }
        public void SetCallbacks(IProbeMetaControlActions instance)
        {
            if (m_Wrapper.m_ProbeMetaControlActionsCallbackInterface != null)
            {
                @NextProbe.started -= m_Wrapper.m_ProbeMetaControlActionsCallbackInterface.OnNextProbe;
                @NextProbe.performed -= m_Wrapper.m_ProbeMetaControlActionsCallbackInterface.OnNextProbe;
                @NextProbe.canceled -= m_Wrapper.m_ProbeMetaControlActionsCallbackInterface.OnNextProbe;
                @PrevProbe.started -= m_Wrapper.m_ProbeMetaControlActionsCallbackInterface.OnPrevProbe;
                @PrevProbe.performed -= m_Wrapper.m_ProbeMetaControlActionsCallbackInterface.OnPrevProbe;
                @PrevProbe.canceled -= m_Wrapper.m_ProbeMetaControlActionsCallbackInterface.OnPrevProbe;
            }
            m_Wrapper.m_ProbeMetaControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextProbe.started += instance.OnNextProbe;
                @NextProbe.performed += instance.OnNextProbe;
                @NextProbe.canceled += instance.OnNextProbe;
                @PrevProbe.started += instance.OnPrevProbe;
                @PrevProbe.performed += instance.OnPrevProbe;
                @PrevProbe.canceled += instance.OnPrevProbe;
            }
        }
    }
    public ProbeMetaControlActions @ProbeMetaControl => new ProbeMetaControlActions(this);
    public interface IProbeControlActions
    {
        void OnForwardAxisPos(InputAction.CallbackContext context);
        void OnForwardAxisNeg(InputAction.CallbackContext context);
    }
    public interface IProbeMetaControlActions
    {
        void OnNextProbe(InputAction.CallbackContext context);
        void OnPrevProbe(InputAction.CallbackContext context);
    }
}
