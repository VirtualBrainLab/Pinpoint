using LightJson;
using Unisave.Arango;
using Unisave.Serialization;
using Unisave.Serialization.Context;
using UnityEngine.Scripting;

namespace Unisave.Heapstore
{
    /// <summary>
    /// Represents the value of a database JSON document
    /// </summary>
    public class Document : IUnisaveSerializable
    {
        /// <summary>
        /// Name of the document's collection
        /// </summary>
        public string Collection => documentId.Collection;
        
        /// <summary>
        /// Key of the document, within the collection
        /// </summary>
        public string Key => documentId.Key;
        
        /// <summary>
        /// Unique identifier of the document
        /// </summary>
        public string Id => documentId.Id;

        [Preserve]
        private DocumentId documentId;
        
        /// <summary>
        /// Data stored inside the document
        /// (this excludes the database metadata fields, like "_id")
        /// </summary>
        [Preserve]
        public JsonObject Data { get; }

        /// <summary>
        /// Document revision code (re-generated by the database with each write)
        /// </summary>
        [Preserve]
        public string Revision { get; }

        /// <summary>
        /// Creates a document representation
        /// from the JSON object fetched from ArangoDB
        /// </summary>
        public Document(JsonObject document)
        {
            documentId = DocumentId.Parse(document["_id"]);
            Revision = document["_rev"];

            document.Remove("_key");
            document.Remove("_id");
            document.Remove("_rev");
            
            Data = document;
        }
        
        // deserialization constructor
        [Preserve]
        protected Document(
            JsonValue json,
            DeserializationContext context
        ) : this(json.AsJsonObject) { }
        
        /// <summary>
        /// Used by the serialization system to convert to a JSON object
        /// </summary>
        [Preserve]
        public JsonValue ToJson(SerializationContext context)
        {
            JsonObject document = new JsonObject();
            foreach (var item in Data)
                document[item.Key] = item.Value;

            document["_key"] = Key;
            document["_id"] = Id;
            document["_rev"] = Revision;

            return document;
        }

        /// <summary>
        /// Converts the document to a custom type by using the
        /// Unisave Serialization system
        /// </summary>
        /// <typeparam name="T">What type to convert to</typeparam>
        /// <returns>Instance of the requested type</returns>
        public T As<T>()
        {
            return Serializer.FromJson<T>(
                ToJson(SerializationContext.ClientToClient),
                DeserializationContext.ClientToClient
            );
        }
    }
}